name: CI and release pipeline

on:
  pull_request:
  push:
    branches: ["main"]
    tags: ["*"]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check:
          - name: Check code-formatting
            run: poetry run black --check .
          - name: Check import sorting
            run: poetry run isort --check-only .
          - name: pylint
            run: poetry run pylint dmarc_metrics_exporter
          - name: Check static typing
            run: poetry run mypy dmarc_metrics_exporter
    steps:
      - uses: actions/checkout@v3
      - run: git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main

      - name: Set up Python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: '3.11'

      - uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v3.0.11
        with:
          path: .venv
          key: ${{ runner.os }}-py3.11-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.11-venv-
      - uses: ./.github/actions/setup-project

      - name: ${{ matrix.check.name }}
        run: ${{ matrix.check.run }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v3.0.11
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-venv-
      - uses: ./.github/actions/setup-project

      - name: Start required services (Greenmail)
        run: docker-compose up -d
      - name: Test and measure coverage with pytest
        run: poetry run pytest --verbose --cov=dmarc_metrics_exporter --cov-report=xml
      - uses: codecov/codecov-action@v3

  release:
    runs-on: ubuntu-latest
    needs: [static-analysis, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4.3.0
        with:
          python-version: '3.11'

      - uses: actions/cache@v3.0.11
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v3.0.11
        with:
          path: .venv
          key: ${{ runner.os }}-py3.11-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.11-venv-
      - uses: ./.github/actions/setup-project

      - name: Publish to PyPI
        run: poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      - name: Wait for release to become available
        run: sleep 3

      - name: Set version
        id: version
        run: echo "version=${GITHUB_REF#refs/*/v}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: sed -E -n '/^\[${{ steps.version.outputs.version }}\]/,/^\[[0-9\.]+\]/{/^\[[0-9\.]+\]|^-+$/!p;}' CHANGELOG.rst > release-body.rst

      - uses: docker://pandoc/core:2.10
        with:
          args: --standalone --wrap none -f rst -t gfm --output=release-body.md release-body.rst

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-body.md
          tag_name: v${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-image:
    needs: [release]
    uses: "jgosmann/dmarc-metrics-exporter/.github/workflows/docker-publish.yml@main"
    with:
      version: ${{ github.ref }}
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
